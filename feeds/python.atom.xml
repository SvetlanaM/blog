<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>encukou/blog</title><link href="http://encukou.cz/" rel="alternate"></link><link href="http://encukou.cz/feeds/python.atom.xml" rel="self"></link><id>http://encukou.cz/</id><updated>2014-01-05T00:00:00+01:00</updated><entry><title>Měnění objektů</title><link href="http://encukou.cz/blog/2014/01/05/cs-meneni-objektu" rel="alternate"></link><updated>2014-01-05T00:00:00+01:00</updated><author><name>Petr Viktorin</name></author><id>tag:encukou.cz,2014-01-05:blog/2014/01/05/cs-meneni-objektu</id><summary type="html">&lt;p&gt;Už víme, &lt;a href="http://encukou.cz/blog/2014/01/05/cs-promenne-jsou-jmena"&gt;jak v&amp;nbsp;Pythonu fungují proměnné&lt;/a&gt;.
(Pokud ne, doporučuju to napřed zjistit,
už jen pro seznámení s&amp;nbsp;mými uměleckými diagramy.)
Teď se pojďme podívat na to, jak se chovají jejich hodnoty – tedy&amp;nbsp;objekty.&lt;/p&gt;


&lt;p&gt;Toto je druhý ze série článků o&amp;nbsp;tom, jak funguje Python.
Pokud jsi se dostala přímo sem, koukni na
&lt;a href="http://encukou.cz/blog/2014/01/05/cs-rozcestnik-python"&gt;Rozcestník&lt;/a&gt;
a&amp;nbsp;trochu se zorientuj.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Řetězce, stejně jako čísla nebo n-tice, jsou neměnitelné &lt;em&gt;(immutable)&lt;/em&gt;.
To znamená, že se nedá žádným způsobem změnit jejich hodnota.
Chceme-li řetězec „změnit“, musíme vytvořit úplně nový objekt
s&amp;nbsp;novou hodnotou.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;retezec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;retezec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;retezec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;retezec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;retezec&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;D&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;retezec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;retezec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tyhle příkazy vytvoří několik „sirotků“,
než do proměnné dostanou správnou hodnotu:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;┌─────────┐     ╔═══════╗
│ retezec ├─┐ ×→║ &amp;#39;abc&amp;#39; ║
└─────────┘ │   ╚═══════╝
            │   ╔═══════╗
            │ ×→║ &amp;#39;ABC&amp;#39; ║    ╔═════╗
            │   ╚═══════╝    ║ &amp;#39;D&amp;#39; ║
            │   ╔════════╗   ╚═════╝
            │ ×→║ &amp;#39;ABCD&amp;#39; ║
            │   ╚════════╝
            │   ╔═══════╗
            └──→║ &amp;#39;BCD&amp;#39; ║
                ╚═══════╝
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Existují ale i&amp;nbsp;objekty, které měnit lze. Klasický příklad jsou&amp;nbsp;seznamy.&lt;/p&gt;
&lt;p&gt;Jak funguje takový seznam?&lt;/p&gt;
&lt;p&gt;Když napíšeme&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;jmeno&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hynek&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;jmena&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;štěpán&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;vilém&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;dostaneme následující situaci:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;┌───────┐          ╔═════════╗
│ jmeno ├─────────→║ &amp;#39;hynek&amp;#39; ║
└───────┘          ╚═════════╝
┌───────┐    ╔═════╤═════╗
│ jmena ├───→║ [0] │ [1] ║
└───────┘    ╚══╪══╧══╪══╝
                │     │         ╔═════════╗
                │     └────────→║ &amp;#39;vilém&amp;#39; ║
                │ ╔══════════╗  ╚═════════╝
                └→║ &amp;#39;štěpán&amp;#39; ║ 
                  ╚══════════╝
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Položky seznamu se chovají jako proměnné.
Stejně jako hodnota výrazu &lt;code&gt;jmeno&lt;/code&gt; je teď &lt;code&gt;'hynek&lt;/code&gt;',
výraz &lt;code&gt;jmena[0]&lt;/code&gt; má hodnotu &lt;code&gt;'štěpán'&lt;/code&gt;.
A&amp;nbsp;stejně tak jako můžeme přiřadit do proměnné &lt;code&gt;jmeno&lt;/code&gt;,
můžeme přiřadit i&amp;nbsp;do &lt;code&gt;jmena[0]&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;jmena&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jmeno&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;a&amp;nbsp;dostaneme stejný výsledek, jako by &lt;code&gt;jmena[0]&lt;/code&gt; byla normální proměnná:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;┌───────┐          ╔═════════╗
│ jmeno ├─────────→║ &amp;#39;hynek&amp;#39; ║
└───────┘       ┌─→╚═════════╝
┌───────┐    ╔══╪══╤═════╗
│ jmena ├───→║ [0] │ [1] ║
└───────┘    ╚═════╧══╪══╝
                      │         ╔═════════╗
                      └────────→║ &amp;#39;vilém&amp;#39; ║
                                ╚═════════╝
                    * poof *
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Protože je seznam objekt jako každý jiný,
může mít více jmen — může na něj ukazovat více proměnných.
Po příkazu&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;slova&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jmena&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;bude situace vypadat takhle:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;                   ╔═════════╗
                ┌─→║ &amp;#39;hynek&amp;#39; ║
                │  ╚═════════╝
┌───────┐    ╔══╪══╤═════╗
│ jmena ├───→║ [0] │ [1] ║
└───────┘ ┌─→╚═════╧══╪══╝
┌───────┐ │           │         ╔═════════╗
│ slova ├─┘           └────────→║ &amp;#39;vilém&amp;#39; ║
└───────┘                       ╚═════════╝
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Seznam teď můžeme měnit pomocí kteréhokoli z&amp;nbsp;těch dvou&amp;nbsp;jmen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jmena&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# → [&amp;#39;hynek&amp;#39;, &amp;#39;vilem&amp;#39;]&lt;/span&gt;
&lt;span class="n"&gt;slova&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;jarmila&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# na proměnnou `jmena` vůbec nesaháme!&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jmena&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# → [&amp;#39;hynek&amp;#39;, &amp;#39;vilem&amp;#39;, &amp;#39;jarmila&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Když si uvědomíme, co se děje uvnitř,
nemůže nás&amp;nbsp;toto chování ničím&amp;nbsp;překvapit.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;                   ╔═════════╗
                ┌─→║ &amp;#39;hynek&amp;#39; ║
                │  ╚═════════╝
┌───────┐    ╔══╪══╤═════╤═════╗   ╔═══════════╗
│ jmena ├───→║ [0] │ [1] │ [2] ╫──→║ &amp;#39;jarmila&amp;#39; ║
└───────┘ ┌─→╚═════╧══╪══╧═════╝   ╚═══════════╝
┌───────┐ │           │         ╔═════════╗
│ slova ├─┘           └────────→║ &amp;#39;vilém&amp;#39; ║
└───────┘                       ╚═════════╝
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Toto chování je zdrojem častých chyb.
Musíme pořád mít na paměti, že pokud jakýkoli měnitelný objekt
(např. seznam, nebo slovník) poskytneme třeba nějaké funkci jako parametr,
ta funkce nám ho může pod rukama&amp;nbsp;změnit.&lt;/p&gt;
&lt;p&gt;Abychom zabránili chybám, je dobré co používat neměnitelné objekty
(řetězce, čísla, n-tice), a&amp;nbsp;psát kód tak,
aby objekty neměnil pokud přímo&amp;nbsp;nemusí.&lt;/p&gt;
&lt;p&gt;Ještě připomenu, že pokud máš n-tici,
nelze přiřadit přímo do jejích položek:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ntice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;def&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ntice&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ghi&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;# → TypeError: &amp;#39;tuple&amp;#39; object does not support item assignment&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ale dej si pozor na i&amp;nbsp;to,
že objekty které obsahuje se stále měnit dají:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;seznam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ntice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seznam&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;seznam&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ntice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# → (&amp;#39;abc&amp;#39;, [1, 2, 3, 4])&lt;/span&gt;
&lt;span class="n"&gt;ntice&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seznam&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# → [1, 2, 3, 4, 5]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A&amp;nbsp;to je prozatím k&amp;nbsp;měnění objektů všechno.
Příště se můžeš těšit na důkladný rozbor&amp;nbsp;&lt;em&gt;přiřazování&lt;/em&gt;.&lt;/p&gt;</summary><category term="python"></category><category term="mutability"></category></entry><entry><title>Proměnné jsou jména</title><link href="http://encukou.cz/blog/2014/01/05/cs-promenne-jsou-jmena" rel="alternate"></link><updated>2014-01-05T00:00:00+01:00</updated><author><name>Petr Viktorin</name></author><id>tag:encukou.cz,2014-01-05:blog/2014/01/05/cs-promenne-jsou-jmena</id><summary type="html">&lt;p&gt;Jak v&amp;nbsp;Pythonu fungují proměnné?
Už asi víš, že se přiřazují pomocí rovnítka,
a že se pak dají používat ve výrazech.
Pojďme se na ně podívat trochu&amp;nbsp;podrobněji.&lt;/p&gt;


&lt;p&gt;Toto je první ze série článků o&amp;nbsp;tom, jak funguje Python.
Pokud jsi se dostala přímo sem, koukni na
&lt;a href="http://encukou.cz/blog/2014/01/05/cs-rozcestnik-python"&gt;Rozcestník&lt;/a&gt;
a&amp;nbsp;trochu se zorientuj.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Na rozdíl od jazyků jako C, kde proměnná je vyhrazené místo v&amp;nbsp;paměti,
Proměnné v&amp;nbsp;Pythonu jsou &lt;em&gt;jména&lt;/em&gt;, nebo řekněme&amp;nbsp;&lt;em&gt;ukazatele&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Abych to vysvětlil, pojďme se krok po kroku podívat,
co přesně dělá tohle jednoduché přiřazení:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;jazyk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nejdřív&amp;nbsp;se vyhodnotí výraz za rovnítkem.
Výsledek vyhodnocení výrazu je vždycky nějaký &lt;em&gt;objekt&lt;/em&gt;;
v&amp;nbsp;našem případě řetězec 'python'.
Ukážeme si ho takhle:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;                ╔══════════╗
                ║ &amp;#39;python&amp;#39; ║
                ╚══════════╝
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Teď, když má hodnotu výrazu, podívá se Python na jméno před rovnítkem,
a&amp;nbsp;zařídí, aby na tu hodnotu&amp;nbsp;„ukazovalo“.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;┌───────┐       ╔══════════╗
│ jazyk ├──────→║ &amp;#39;python&amp;#39; ║
└───────┘       ╚══════════╝
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Voilà! Hodnota proměnné &lt;code&gt;jazyk&lt;/code&gt; je odteď&amp;nbsp;&lt;code&gt;'python'&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Pojďme si přiřadit další proměnnou:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;rec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;češ&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;tina&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Opět se vyhodnotí výraz, vezmou se řetězce &lt;code&gt;'češ'&lt;/code&gt; a &lt;code&gt;'tina'&lt;/code&gt;, sečtou se,
a&amp;nbsp;na výslednou hodnotu začne ukazovat proměnná &lt;code&gt;rec&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;┌───────┐       ╔══════════╗
│ jazyk ├──────→║ &amp;#39;python&amp;#39; ║
└───────┘       ╚══════════╝
┌─────┐         ╔═══════════╗
│ rec ├────────→║ &amp;#39;čeština&amp;#39; ║
└─────┘         ╚═══════════╝
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Že to není zas tak složité?&lt;/p&gt;
&lt;p&gt;Teď zkusíme jednu proměnnou „přiřadit“ do druhé:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;jazyk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rec&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Opět se nejdřív&amp;nbsp;vyhodnotí výraz za rovnítkem.
Výsledek bude objekt, který je v&amp;nbsp;proměnné &lt;code&gt;rec&lt;/code&gt;.
A&amp;nbsp;proměnná &lt;code&gt;jazyk&lt;/code&gt; začne jednoduše ukazovat na tento objekt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;┌───────┐       ╔══════════╗
│ jazyk ├───┐ ×→║ &amp;#39;python&amp;#39; ║
└───────┘   │   ╚══════════╝
┌─────┐     └──→╔═══════════╗
│ rec ├────────→║ &amp;#39;čeština&amp;#39; ║
└─────┘         ╚═══════════╝
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tady je důvod, proč říkám že proměnné v&amp;nbsp;Pythonu jsou &lt;em&gt;jména&lt;/em&gt;.
Jeden objekt může mít několik jmen, ale pořád je to ten samý&amp;nbsp;objekt.&lt;/p&gt;
&lt;p&gt;Řetězec &lt;code&gt;'python'&lt;/code&gt; teď žádné jméno nemá. Nedá se k&amp;nbsp;němu nijak
dostat&lt;sup id="fnref:interned-strings"&gt;&lt;a class="footnote-ref" href="#fn:interned-strings" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;, a&amp;nbsp;tudíž s&amp;nbsp;ním dál nemůžeme nijak pracovat.
Jediné co můžeme dělat je vytvořit nový objekt se stejnou hodnotou.
Takovéhle sirotky Python časem smaže, aby nezabíraly paměť počítače:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;┌───────┐
│ jazyk ├───┐      * poof *
└───────┘   │
┌─────┐     └──→╔═══════════╗
│ rec ├────────→║ &amp;#39;čeština&amp;#39; ║
└─────┘         ╚═══════════╝
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Teď, když víme jak fungují proměnné, se můžeme podívat na zoubek
jejich hodnotám, tedy objektům.
Další článek v&amp;nbsp;sérii nám poví
o &lt;a href="http://encukou.cz/blog/2014/01/05/cs-meneni-objektu"&gt;Měnění objektů&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="zdroje-awzxhzdk31dalsi-materialy"&gt;Zdroje a&amp;nbsp;další materiály&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pythontutor.com/"&gt;Python Tutor&lt;/a&gt; umí názorně zobrazovat, jak proměnné fungují&lt;/li&gt;
&lt;li&gt;Ned Batchelder: &lt;a href="http://nedbatchelder.com/text/names.html"&gt;Facts and myths about Python names and values &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;David Gooder: &lt;a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#python-has-names"&gt;Code Like a&amp;nbsp;Pythonista: Idiomatic Python — Python has Names&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:interned-strings"&gt;
&lt;p&gt;Tohle je zjednodušení; řetězce co se vyskytují přímo v kódu
jsou (v CPythonu) součástí modulu, takže se k nim nějak dostat dá,
a budou “žít” dál.
Podrobněji to plánuju rozeberat v článku &lt;em&gt;identity a hodnoty&lt;/em&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:interned-strings" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="python"></category><category term="proměnné"></category></entry><entry><title>Jak funguje Python</title><link href="http://encukou.cz/blog/2014/01/05/cs-rozcestnik-python" rel="alternate"></link><updated>2014-01-05T00:00:00+01:00</updated><author><name>Petr Viktorin</name></author><id>tag:encukou.cz,2014-01-05:blog/2014/01/05/cs-rozcestnik-python</id><summary type="html">&lt;p&gt;Znáte to.
Studentka vám položí otázku, a&amp;nbsp;abyste na ni mohli pořádně odpovědět,
je potřeba trochu osvětlit základy.
Mně se to stalo s&amp;nbsp;proměnnými v&amp;nbsp;Pythonu.&lt;/p&gt;
&lt;p&gt;No a&amp;nbsp;tak píšu.&lt;br /&gt;
Píšu&amp;nbsp;na téma &lt;em&gt;Všechno o&amp;nbsp;proměnných, hodnotách a&amp;nbsp;jménech v&amp;nbsp;Pythonu.&lt;/em&gt;&lt;br /&gt;
Píšu&amp;nbsp;už druhý den.&lt;/p&gt;


&lt;p&gt;Přišel čas to trošku rozdělit.
Tady je moje osnova; až (a&amp;nbsp;jestli) to dopíšu, tak z&amp;nbsp;toho udělám&amp;nbsp;odkazy.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://encukou.cz/blog/2014/01/05/cs-promenne-jsou-jmena"&gt;Proměnné jsou jména&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://encukou.cz/blog/2014/01/05/cs-meneni-objektu"&gt;Měnění objektů&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Přiřazování&lt;/li&gt;
&lt;li&gt;Jmenné prostory&lt;/li&gt;
&lt;li&gt;Identity a&amp;nbsp;hodnoty &lt;!-- udělat odkaz v&amp;nbsp;poznámce pod čarou v "Proměnné jsou jména" --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Články budou používat diakritiku v řetězcích.
V&amp;nbsp;Pythonu 3&amp;nbsp;s&amp;nbsp;tím není žádný problém, ale používáš-li Python 2,
napiš na začátek každého pythoního souboru tyto řádky:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Encoding: UTF-8&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Jinak by všechny ukázky kódu měly fungovat v&amp;nbsp;Pythonu 2.7&amp;nbsp;i&amp;nbsp;3.3,
pokud není jinak uvedeno.&lt;/p&gt;
&lt;p&gt;Pokud uvidíš nějakou chybu, ozvi se mi na &lt;a href="mailto:encukou@gmail.com"&gt;mail&lt;/a&gt;,
nebo rovnou založ &lt;a href="https://github.com/encukou/blog/issues/new"&gt;issue&lt;/a&gt; či &lt;a href="https://github.com/encukou/blog"&gt;pull&amp;nbsp;request&lt;/a&gt;.&lt;/p&gt;</summary><category term="python"></category><category term="rozcestník"></category></entry><entry><title>Jak fungují proměnné v Pythonu</title><link href="http://encukou.cz/blog/2014/01/04/cs-promenne-v-pythonu" rel="alternate"></link><updated>2014-01-04T00:00:00+01:00</updated><author><name>Petr Viktorin</name></author><id>tag:encukou.cz,2014-01-04:blog/2014/01/04/cs-promenne-v-pythonu</id><summary type="html">&lt;p&gt;Všechen kód by měl fungovat v&amp;nbsp;Pythonu 2.7&amp;nbsp;i&amp;nbsp;3.3, pokud není napsáno&amp;nbsp;jinak.&lt;/p&gt;


&lt;h2 id="prirazovani"&gt;Přiřazování&lt;/h2&gt;
&lt;p&gt;Jak už víme, kromě proměnných dovoluje Python přiřazovat i&amp;nbsp;do položek seznamu.
Kromě toho se ještě dá přiřazovat do atributů:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cislo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="c"&gt;# přiřazení do proměnné&lt;/span&gt;
&lt;span class="n"&gt;seznam&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="c"&gt;# přiřazení do položky seznamu&lt;/span&gt;
&lt;span class="n"&gt;objekt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;atribut&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="c"&gt;# přiřazení do atributu&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Přiřazování do položky nebo atributu musí daný objekt „umět“.
Pokud je &lt;code&gt;seznam&lt;/code&gt; opravdu seznam, a&amp;nbsp;pokud je v&amp;nbsp;něm nějaký prvek,
bude &lt;code&gt;seznam[0] = 4&lt;/code&gt; fungovat.
Když to zkusíme s&amp;nbsp;prázdným seznamem, dostaneme chybu.
Stejně tak dostaneme chybu, když máme z&amp;nbsp;nějakého důvodu v&amp;nbsp;proměnné &lt;code&gt;seznam&lt;/code&gt;
třeba číslo (které nemá strukturu jako seznam, není&amp;nbsp;&lt;em&gt;sekvence&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Stejně tak to hodí chybu s řetězcem, který sice indexování umí
(&lt;code&gt;r[0]&lt;/code&gt; vrátí první písmenko), ale jak popisuju výš nedá nijak&amp;nbsp;měnit.&lt;/p&gt;
&lt;p&gt;Co můžeme dát do oněch hranatých závorek taky závisí na typu objektu.
Slovníky podporují různé druhy klíčů.
Seznamy a řetězce podporují čísla (a&amp;nbsp;zápornými čísly se indexuje odzadu),
nebo rozsahy (&lt;em&gt;slices&lt;/em&gt;) jako &lt;code&gt;seznam[2:3]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Stejně tak u&amp;nbsp;atributů záleží na typu objektu,
jestli nás&amp;nbsp;nechá do toho kterého atributu zapsat.
Ze začátku se s&amp;nbsp;tím moc nesetkáme, ale hned v&amp;nbsp;první lekci objektového
programování začneme přiřazujovat do atributů&amp;nbsp;&lt;code&gt;self&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Základní objekt, do jehož položky nebo atributu přiřazujeme,
může být výsledek jakéhokoli výrazu.
Třeba i&amp;nbsp;volání funkce:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;seznam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;jedna&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;vrat_seznam&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;seznam&lt;/span&gt;
&lt;span class="n"&gt;vrat_seznam&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seznam&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# → [0, 1, 2]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="rozbalovaci-prirazeni"&gt;Rozbalovací přiřazení&lt;/h3&gt;
&lt;p&gt;Python nám umožňuje „rozbalit“ (&lt;em&gt;unpack&lt;/em&gt;) objekty jako n-tice a&amp;nbsp;seznamy,
a&amp;nbsp;přiřazovat tak do několika proměnných najednou.
Máme-li třeba funkci jako &lt;code&gt;divmod&lt;/code&gt;, která vrací n-tici, dvojici (podíl, zbytek),
můžeme napsat:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;podil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;zbytek&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;divmod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;a&amp;nbsp;nastavit tak obě proměnné.
Oproti krkolomnému zápisu&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;vysledek&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;divmod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;podil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vysledek&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;zbytek&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vysledek&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;rozbalovací přiřazení nejen přiřadí hodnoty, ale navíc zkontroluje,
že funkce opravdu vrátila právě dvě&amp;nbsp;hodnoty.&lt;/p&gt;
&lt;p&gt;Rozbalovací přiřazení se často používá na výměnu dvou hodnot:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Jak to funguje?
Nejdřív&amp;nbsp;se vyhodnotí výraz za rovnítkem, dvojice &lt;code&gt;(b, a)&lt;/code&gt;.
Ta se pak rozbalí a&amp;nbsp;přiřadí do proměnných &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;.&lt;sup id="fnref:swap-optimization"&gt;&lt;a class="footnote-ref" href="#fn:swap-optimization" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Rozbalovat můžeme i&amp;nbsp;na vnořené objekty.
Řekněme, budeme reprezentovat body v&amp;nbsp;ploše dvojicemi souřadnic,
třeba &lt;code&gt;(0, 0)&lt;/code&gt; a &lt;code&gt;(10, 10)&lt;/code&gt;, a úsečky dvojicemi bodů.
Jednotlivé souřadnice můžeme získat jedním rozbalením,
pomocí závorek – vypadá to, jako bychom „přiřazovali do n-tice“:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cara&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c"&gt;# úsečka z (0, 0) do (10, 10)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cara&lt;/span&gt;  &lt;span class="c"&gt;# rozbalení jednotlivých souřadnic&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Můžeme tu použít i&amp;nbsp;závorky hranaté,
kde se chovají úplně steně, jen to vypadají trochu nezvykle:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cara&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pokud předem nevíme, kolik hodnot má objekt který rozbalujeme,
můžeme v&amp;nbsp;Pythonu 3&amp;nbsp;do jedné proměnné dát seznam zbývajících hodnot.
Stačí ji označit hvězdičkou:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Pouze v Pythonu 3&lt;/span&gt;
&lt;span class="n"&gt;prvni&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;druhy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;zbytek&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;posledni&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prvni&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# → 0&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;druhy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# → 1&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zbytek&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# → [2, 3]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;posledni&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# → 4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Občas se stane že máme seznam s&amp;nbsp;jedním prvkem.
Obvykle to bývá u&amp;nbsp;struktur, kde jsou některé prvky vícehodnotové a&amp;nbsp;jiné ne,
ale pro zachování „tvaru“ jsou všechny v&amp;nbsp;seznamech.
Třeba HTML hlavičky: &lt;!-- záznamy z&amp;nbsp;LDAPu by asi nikomu nic neřekly :( --&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;Server&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;  &lt;span class="c"&gt;# víme že &amp;#39;Server&amp;#39; bude vždy jen jeden&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;Connection&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;keep-alive&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;Cache-Control&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;no-cache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;no-store&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;  &lt;span class="c"&gt;# ale tady je hodnot víc&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Stejně jako n-tici s&amp;nbsp;jedním prvkem píšeme &lt;code&gt;(1,)&lt;/code&gt; a&amp;nbsp;ne &lt;code&gt;(1)&lt;/code&gt;,
u&amp;nbsp;rozbalení musíme použít čárku navíc.
A&amp;nbsp;nebo použijeme hranaté závorky:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;server&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;server&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Oproti &lt;code&gt;server = headers['server'][0]&lt;/code&gt; je rozbalení bezpečnější:
ověří, že máme opravdu jen jeden&amp;nbsp;prvek.&lt;/p&gt;
&lt;h3 id="rozsirene-prirazovani"&gt;Rozšířené přiřazování&lt;/h3&gt;
&lt;p&gt;Komu samotné &lt;code&gt;=&lt;/code&gt; nestačí, může použít tzv. rozšířené přiřazovací operátory
(&lt;em&gt;augmented assignment operators&lt;/em&gt;), které kromě přiřazení
dělají nějakou operaci.
Jsou to
&lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, &lt;code&gt;*=&lt;/code&gt;, &lt;code&gt;/=&lt;/code&gt;, &lt;code&gt;%=&lt;/code&gt;, &lt;code&gt;&amp;amp;=&lt;/code&gt;, &lt;code&gt;|=&lt;/code&gt;, &lt;code&gt;^=&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;**=&lt;/code&gt;, a&amp;nbsp;&lt;code&gt;//=&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Například&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;promenna&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;hodnota&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;dělá téměř to samé jako&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;promenna&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;promenna&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;hodnota&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;s&amp;nbsp;tím rozdílem, že některé objekty, se tímto příkazem přímo změní.
Ilustruje to následující příklad:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;seznam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;druhy_seznam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;seznam&lt;/span&gt;
&lt;span class="n"&gt;druhy_seznam&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c"&gt;# změna původního seznamu&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seznam&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# → [1, 2, 3, 4]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ale:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;seznam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;druhy_seznam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;seznam&lt;/span&gt;
&lt;span class="n"&gt;druhy_seznam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;druhy_seznam&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c"&gt;# vytvoření nového seznamu&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seznam&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# → [1, 2, 3]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Rozšířené přiřazení je proto záhodno používat &lt;em&gt;jen&lt;/em&gt; tam,
kde měněný objekt není dostupný pod jinými&amp;nbsp;jmény.&lt;/p&gt;
&lt;h3 id="dalsi-prirazujici-prikazy"&gt;Další přiřazující příkazy&lt;/h3&gt;
&lt;p&gt;A&amp;nbsp;komu nestačí &lt;code&gt;=&lt;/code&gt; ani rozšířené přiřazení,
má na výběr vybrat z&amp;nbsp;několika dalších příkazů, které přiřazují hodnoty.
Některé z&amp;nbsp;nich možná ještě neznáte – nevadí, prostě je zatím přeskočte.
První z&amp;nbsp;nich je ale snadvšem dobře známý:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;hodnota&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hodnota&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Příkaz &lt;code&gt;for&lt;/code&gt; přiřazuje do své kontrolní proměnné.
A&amp;nbsp;přiřazuje se vším všudy: můžeme v&amp;nbsp;něm použít i&amp;nbsp;rozbalování,
například při&amp;nbsp;procházení slovníkem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;slovnik&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;jedna&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;dva&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;tri&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;klic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hodnota&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;slovnik&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; -&amp;gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;klic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hodnota&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Stejně tak můžeme ve &lt;code&gt;for&lt;/code&gt; přiřazovat do atributu nebo položky,
ale ještě jsem se nesetkal se situací, kdy by to bylo&amp;nbsp;užitečné.&lt;/p&gt;
&lt;p&gt;Stejně jako v&amp;nbsp;příkazové formě &lt;code&gt;for&lt;/code&gt; funguje přiřazení i&amp;nbsp;v&amp;nbsp;generátorových
notacích (&lt;em&gt;generator, list/dict/set&amp;nbsp;comprehension&lt;/em&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;hodnota&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;hodnota&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;hodnota&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Také příkazy &lt;code&gt;with&lt;/code&gt; a &lt;code&gt;except&lt;/code&gt; jsou, co se přiřazování týče, normální:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;hodnota&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;hodnota&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Jen pokud budeme z&amp;nbsp;nějakého důvodu chtít rozbalovat,
je potřeba všechny zúčastněné proměnné uzavřít do závorek,
protože čárka tu už má (nebo měla) jiný význam.
Můžeme tedy napsat třeba šílenost jako:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;dvouradkovy_soubor.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;radek1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;radek2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;radek1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;radek2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Další přiřazující příkaz je &lt;code&gt;import&lt;/code&gt;, ve všech jeho podobách.
Na rozdíl od ostatních umí přiřadit jen do čistého jména proměnné;
položky ani atributy nemá rád.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hodnota&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;hodnota2&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;modul&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;hodnota&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hodnota2&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;modul&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;hodnota&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;modul&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;vec&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;hodnota&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ještě zajímavější jsou příkazy &lt;code&gt;def&lt;/code&gt; a &lt;code&gt;class&lt;/code&gt;.
Obě vytvoří nějaký objekt, ať už funkci nebo třídu,
a&amp;nbsp;přiřadí jej do dané proměnné (zase ale umí pouze jednoduchá&amp;nbsp;jména).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hodnota&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;hodnota&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Navíc ale jméno „zapíše“ do vytvořeného objektu.
Funkce si bude sama „pamatovat“ jak se jmenuje,
nezávisle na proměnné ve které je&amp;nbsp;uložena.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nejaka_funkce&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="n"&gt;jine_jmeno&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nejaka_funkce&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jine_jmeno&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# → &amp;lt;function nejaka_funkce ...&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Poslední (opravdu!) a&amp;nbsp;nejexotičtější forma přiřazování jsou formální
argumenty funkcí.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;funkce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hodnota&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hodnota2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hodnota2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;funkce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c"&gt;# → 2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hned po zavolání funkce se daná jména nastaví na předané hodnoty.
Děje se to v&amp;nbsp;kontextu funkce,
takže, jak si povíme v&amp;nbsp;příštím článku, vznikají lokální&amp;nbsp;proměnné.&lt;/p&gt;
&lt;p&gt;Opět zde není možné přiřazovat do položek či&amp;nbsp;atributů.
V&amp;nbsp;Pythonu 2&amp;nbsp;sice v&amp;nbsp;argumentech jde použít rozbalování,
ale nedoporučuju to dělat – už jen proto že
to nejnovější verze jazyka nepodporuje.&lt;/p&gt;
&lt;p&gt;Funkce definované pomocí &lt;code&gt;lambda&lt;/code&gt; se, co se argumentů týče,
samozřejmě chovají úplně stejně jako ty z&amp;nbsp;&lt;code&gt;def&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="jmenne-prostory"&gt;Jmenné prostory&lt;/h2&gt;
&lt;p&gt;xxx: úvod&lt;/p&gt;
&lt;h3 id="lokalni-promenne"&gt;Lokální proměnné&lt;/h3&gt;
&lt;h3 id="hranice-jmennych-prostoru"&gt;Hranice jmenných prostorů&lt;/h3&gt;
&lt;h3 id="generatory-vwzxhzdk93pythonu-3"&gt;Generátory v&amp;nbsp;Pythonu 3&lt;/h3&gt;
&lt;h2 id="identity-awzxhzdk94hodnoty"&gt;Identity a&amp;nbsp;hodnoty&lt;/h2&gt;
&lt;h2 id="odpoved-sandre"&gt;(odpověď Sandře)&lt;/h2&gt;
&lt;p&gt;Připravím obsáhlejší odpověď. Pro teď jen shrnutí, snad to bude trochu
pochopitelné:&lt;/p&gt;
&lt;p&gt;Lokální proměnné se vytváří přiřazením: pokud je kdekoli ve funkci příkaz jako
    promenna = nejaka_hodnota
nebo jiné přiřazení, např:
    promenna += 1
    for promenna in 1, 2, 3: ...
    def promenna(a, b, c): ...
tak je &lt;code&gt;promenna&lt;/code&gt; lokální, a "vnější" proměnná stejného názvu se úplně&amp;nbsp;ignoruje.&lt;/p&gt;
&lt;p&gt;Pokud tam žádný přiřazovací příkaz není, tak se lokální proměnná
nevytvoří, výrazy jako
    print promenna
    funkce(promenna)
budou používat globální proměnnou.&lt;/p&gt;
&lt;p&gt;Příkaz &lt;code&gt;global&lt;/code&gt; zabraňuje vytváření lokální proměnné v&amp;nbsp;dané funkci,
takže se globální proměnné dá přiřadit.&lt;/p&gt;
&lt;p&gt;Tenhle příkaz:
    x = promenna + 1
přiřazuje do &lt;code&gt;x&lt;/code&gt;; z &lt;code&gt;promenna&lt;/code&gt; nedělá lokální proměnnou.
Je-li v &lt;code&gt;promenna&lt;/code&gt; seznam, po příkazu:
    promenna[0] = 24
bude v &lt;code&gt;promenna&lt;/code&gt; stále stejný seznam, změní se jen hodnota "vevnitř".
Přiřazuje se do &lt;code&gt;promenna[0]&lt;/code&gt;, nikoli do samotné &lt;code&gt;promenna&lt;/code&gt;, takže to
zase nedělá lokální proměnnou.
Proto jsou v&amp;nbsp;té hře všechny ty globální proměnné&amp;nbsp;seznamy.&lt;/p&gt;
&lt;p&gt;Bez globálních proměnných by se to dalo napsat objektově, ale to je na
delší projekt pro PyLadies 2014 :)&lt;/p&gt;
&lt;h2 id="zdroje-awzxhzdk99dalsi-materialy"&gt;Zdroje a&amp;nbsp;další materiály&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Dokumentace Pythonu, zvláště &lt;a href="http://docs.python.org/2/reference/index.html"&gt;popis jazyka&lt;/a&gt; a&amp;nbsp;&lt;a href="http://docs.python.org/2/reference/grammar.html"&gt;gramatiky&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:swap-optimization"&gt;
&lt;p&gt;Další zjednodušení; tvořit nový objekt je zbytečně pomalé,
proto se v tomhle případě se v CPythonu n-tice ve skutečnosti nevytvoří.
Proměnné se prohodí přímo.
Ale efekt je stejný, jako kdyby se to dělo podle mého popisu.&amp;#160;&lt;a class="footnote-backref" href="#fnref:swap-optimization" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="python"></category><category term="proměnné"></category></entry></feed>